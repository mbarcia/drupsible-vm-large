---
- name: Common configuration (DebOps) for all hosts
  hosts: [ '{{ app_name }}' ]
  become: True

  roles:
# Common tasks for all servers
  - role: debops.secret
    tags: [ secret, secret-all, pki, sshd, mysql, varnish ]
  - role: debops.etc_services
    tags: [ etc_services ]

# Basic configuration of the SSH daemon for all servers
  - role: debops.ferm
    tags: [ ferm, sshd, ferm-all, deployment ]
    ferm__dependent_rules: '{{ sshd__ferm__dependent_rules }}'
  - role: debops.tcpwrappers
    tags: [ tcpwrappers, deployment ]
    tcpwrappers_dependent_allow: '{{ sshd__tcpwrappers__dependent_allow }}'
  - role: debops.console
    tags: [ 'console' ]
  - role: debops.sshkeys
    tags: [ sshkeys, sshd, sshkeys-all ]
  - role: debops.sshd
    when: not packer|default(False)|bool
    tags: [ sshd ]

# Timezone configuration for all servers
  tasks:
  - name: Get current time zone
    shell: '/usr/bin/timedatectl status | grep "Time zone" | sed "s|.*Time zone: \(.*/.*\) (.*)$|\1|g"'
    register: current_timezone
    changed_when: False
    tags: [ tz ]
  - name: Set time zone in /etc/localtime
    command: "/usr/bin/timedatectl set-timezone {{ app_timezone|default('Europe/Madrid') }}"
    tags: [ tz ]
    when: current_timezone.stdout != app_timezone|default('Europe/Madrid')
  - name: Get current ntp status
    shell: '/usr/bin/timedatectl status | grep -e "NTP enabled" -e "Network time on" | sed "s/.*[NTP enabled|Network time on]: \(.*\)$/\1/g"'
    register: current_ntp_status
    changed_when: False
    tags: [ tz ]
  - name: Set NTP enabled
    command: /usr/bin/timedatectl set-ntp true
    when: current_ntp_status.stdout|bool != True
    tags: [ tz ]

- name: MySQL inventory group
  hosts: [ '{{ app_name }}-{{ app_target }}_mysql' ]
  become: True

  roles:
  - role: debops.secret
    tags: [ secret, mysql, secret-mysql ]
  - role: drupsible.mysql
    tags: [ mysql ]
    mysql_mysqld_allow_group: "{{ app_name + '-' + app_target + '_deploy' }}"
    mysql_in_cloud: "{{ app_in_cloud }}"
    mysql_databases:
    - name: "{{ app_name }}"
      state: 'present'
    - name: "{{ app_name }}_{{ app_build_id }}"
      state: "{{ app_db_create_for_build_enabled|default(False)|bool|ternary('present', 'absent') }}"
    mysql_users:
    - name: "{{ app_db_user }}"
      host: "%"
      state: 'present'
      password: '{{ app_db_password | default(lookup("password", secret + "/credentials/" + app_name + "/mysql/" + app_db_user + "/password chars=ascii_letters,digits,hexdigits length=" + mysql_password_length)) }}'
      priv: '{{ app_db_name }}%.*:ALL'
    - name: "{{ app_db_user }}"
      host: localhost
      state: 'present'
      password: '{{ app_db_password | default(lookup("password", secret + "/credentials/" + app_name + "/mysql/" + app_db_user + "/password chars=ascii_letters,digits,hexdigits length=" + mysql_password_length)) }}'
      priv: '{{ app_db_name }}%.*:ALL'
    - name: "{{ app_db_user }}"
      host: "{{ ansible_hostname|default(inventory_hostname) }}"
      state: 'present'
      password: '{{ app_db_password | default(lookup("password", secret + "/credentials/" + app_name + "/mysql/" + app_db_user + "/password chars=ascii_letters,digits,hexdigits length=" + mysql_password_length)) }}'
      priv: '{{ app_db_name }}%.*:ALL'
    - name: "{{ app_db_user }}"
      host: "10.0.2.2"
      state: 'present'
      password: '{{ app_db_password | default(lookup("password", secret + "/credentials/" + app_name + "/mysql/" + app_db_user + "/password chars=ascii_letters,digits,hexdigits length=" + mysql_password_length)) }}'
      priv: '{{ app_db_name }}%.*:ALL'
  - role: debops.ferm
    tags: [ ferm, mysql, ferm-mysql, deployment ]
    ferm__dependent_rules: '{{ mysql_ferm_dependent_rules_exported|default([]) }}'
    when: not app_in_cloud|bool
  - role: debops.tcpwrappers
    tags: [ tcpwrappers, mysql, tcpwrappers-mysql, deployment ]
    tcpwrappers_dependent_allow: '{{ mysql_tcpwrappers_dependent_allow_exported|default([]) }}'
    when: not app_in_cloud|bool

- name: Deploy inventory group
  hosts: [ '{{ app_name }}-{{ app_target }}_deploy' ]
  become: True

  roles:
  - role: debops.pki/env
    tags: [ pki, secret, pki-deploy ]
    when: app_https_enabled|default(False)|bool or
      (smtp_server is defined and
      smtp_port is defined and
      smtp_user is defined)
  - role: debops.secret
    tags: [ secret, pki, secret-pki-deploy ]
    secret_directories: "{{ pki_env_secret_directories|default('') }}"
    when: app_https_enabled|default(False)|bool or
      (smtp_server is defined and
      smtp_port is defined and
      smtp_user is defined)
  - role: debops.dhparam
    tags: [ dhparam, pki, dhparam-deploy, provision ]
    when: app_https_enabled|default(False)|bool or
      (smtp_server is defined and
      smtp_port is defined and
      smtp_user is defined)
  - role: debops.pki
    tags: [ pki, pki-deploy ]
    when: app_https_enabled|default(False)|bool or
      (smtp_server is defined and
      smtp_port is defined and
      smtp_user is defined)
  - role: debops.postfix
    tags: [ postfix, postfix-deploy ]
    postfix: [ 'client' ]
    postfix_relayhost: "[{{ smtp_server }}]:{{ smtp_port }}"
    postfix_smtp_sasl_password_map: "{ '[{{ smtp_server }}]:{{ smtp_port }}': '{{ smtp_user }}' }"
    when: smtp_server is defined and smtp_port is defined and smtp_user is defined
  - role: debops.users
    when: not packer|default(False)|bool
    users_enabled: True
    users_list:
    - name: "{{ app_user }}"
      forward: "{{ app_admin_email }}"
      shell: '/bin/bash'
      state: 'present'
    users_admins: [ "{{ app_user }}" ]
    tags: [ users, users-deploy, deployment ]
  - role: drupsible.apache2
    tags: [ apache2, php, apache2-deploy ]
    apache2_site_name: "{{ app_name }}"
    apache2_webdomain: "{{ app_webdomain }}"
    apache2_pki_crt: "{{ deploy_pki_crt|default('/etc/pki/realms/domain/default.crt') }}"
    apache2_pki_key: "{{ deploy_pki_key|default('/etc/pki/realms/domain/default.key') }}"
    apache2_port: "{{ app_varnish_enabled|default(False)|bool|ternary(app_apache2_alt_port|default('8080'), '80') }}"
    apache2_fpm_server_status_path: "{{ app_fpm_status_path | default('/fpm-status') }}"
    apache2_fpm_ping_path: "{{ app_fpm_ping_path | default('/ping') }}"
    apache2_webhost: "{{ app_webhost }}"
    apache2_fpm_listen: "{{ app_fpm_listen }}"
    apache2_fpm_listen_uds: "{{ app_fpm_listen_uds }}"
    apache2_https_enabled: "{{ app_https_enabled|default(False)|bool }}"
    apache2_varnish_enabled: "{{ app_varnish_enabled }}"
    apache2_ping_group: "{{ app_name + '-' + app_target + '_varnish' }}"
    apache2_in_cloud: "{{ app_in_cloud }}"
  - role: drupsible.php
    tags: [ php, php-deploy, newrelic, uploadprogress, xdebug, composer, memcached, twigc, blackfire ]
    deploy_php_app_pool:
      enabled: True
      name: "{{ app_name }}"
      listen: "{{ ansible_local.apache2.uds_available|default(True)|bool|ternary(app_fpm_listen_uds, app_fpm_listen) }}"
      user: "{{ app_user }}"
      group: "{{ app_group }}"
    php__pools: [ '{{ deploy_php_app_pool }}' ]
  - role: drupsible.newrelic
    tags: [ newrelic, newrelic-deploy ]
    when: provision_new_relic|default(False)|bool and 'newrelic-php5' in apache2_php5_packages_ontop|default([]) and ansible_local.apache2.mpm == 'prefork'
  - role: drupsible.uploadprogress
    tags: [ uploadprogress, uploadprogress-deploy ]
    when: ansible_distribution_release != 'xenial'
  - role: drupsible.xdebug
    tags: [ xdebug, xdebug-deploy ]
    xdebug_cli_enabled: "{{ deploy_xdebug_cli_enabled|default(False)|bool }}"
    when: deploy_xdebug_enabled|default(False)|bool
  - role: drupsible.composer
    tags: [ composer, composer-deploy, drupal-console, drush, provision ]
  - role: drupsible.memcached
    tags: [ memcached, memcached-deploy ]
    when: app_memcached_enabled|default(True)|bool
  - role: drupsible.drupal-console
    tags: [ drupal-console, drupal-console-deploy, provision ]
    when: deploy_drupal_console_enabled|default(True)|bool
  - role: drupsible.newrelic
    tags: [ newrelic, newrelic-deploy ]
    when: provision_new_relic|default(False)|bool
  - role: drupsible.drush
    tags: [ drush, drush-deploy, provision ]
    drush_drupal_version: "{{ app_drupal_version|default('8') }}"
    drush_app_user: "{{ app_user }}"  
  - role: drupsible.samba
    tags: [ samba, samba-deploy ]
    samba_webdomain: "{{ app_webdomain }}"
    samba_webhost: "{{ app_webhost }}"
    when: app_target == 'local'
  - role: drupsible.twigc
    tags: [ twigc, twigc-deploy ]
    when: app_drupal_version|default('8')|version_compare('8', '==') and ansible_distribution_release != 'xenial'
    twigc_composer_working_dir: "/home/{{ app_user }}/{{ app_name }}"
  - role: debops.ferm
    tags: [ ferm, ferm-deploy, postfix, apache2, samba, deployment ]
    apache2_port: "{{ app_varnish_enabled|default(False)|bool|ternary(app_apache2_alt_port|default('8080'), '80') }}"
    ferm__dependent_rules: '{{ postfix_ferm_dependent_rules|default([]) + apache2_ferm_dependent_rules + samba_ferm_dependent_rules|default([]) }}'
    when: not app_in_cloud|bool
  - role: drupsible.blackfire
    tags: [ blackfire, blackfire-deploy ] 
    when: deploy_blackfire_enabled|default(False)|bool

- name: Varnish inventory group
  hosts: [ '{{ app_name }}-{{ app_target }}_varnish' ]
  become: True

  roles:
  - role: debops.secret
    tags: [ secret, varnish, secret-varnish ]
  - role: drupsible.varnish
    tags: [ varnish, varnish-varnish ]
    varnish_webdomain: "{{ app_webdomain }}"
    varnish_trusted_hosts: "{{ app_server_aliases }}"
    varnish_pipe_timeout: 600
    varnish_apache2_port: "{{ app_apache2_alt_port|default('8080') }}"
    varnish_management_console_listen_on: "{{ app_varnish_mgmt_port|default('6082') }}"
    varnish_fpm_ping_path: "{{ app_fpm_ping_path | default('/ping') }}"
    varnish_webhost: "{{ app_webhost }}"
    varnish_app_name: "{{ app_name }}"
    varnish_deploy_group: "{{ app_name + '-' + app_target + '_deploy' }}"
    varnish_in_cloud: "{{ app_in_cloud }}"
    when: app_varnish_enabled|bool
  - role: debops.ferm
    tags: [ ferm, varnish, ferm-varnish, deployment ]
    ferm__dependent_rules: "{{ varnish_ferm_dependent_rules_exported|default([]) }}"
    when: not app_in_cloud|bool
